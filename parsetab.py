
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programaleftPLUSMINUSleftTIMESDIVIDEARRAY ATRIB BEGIN COLON COMMA CONST CONST_VALOR DEF DIVIDE DO DOT ELSE END EQUAL EQUAL_TO GREATER_THAN GREATER_THAN_OR_EQUAL ID IF INTEGER LBRACKET LESS_THAN LESS_THAN_OR_EQUAL LPAREN MINUS NOT_EQUAL_TO NUMERO OF PLUS RBRACKET READ REAL RECORD RETURN RPAREN SEMI STRING THEN TIMES TYPE VAR WHILE WRITEprograma : lista_declaracoes corpo_principallista_declaracoes : lista_declaracoes declaracao\n                         | emptydeclaracao : type_declaration_block\n                  | var_declaration_block\n                  | function_declarationcorpo_principal : BEGIN lista_comandos END SEMIlista_comandos : lista_comandos comando\n                      | emptycomando : atribuicao\n               | return_statement\n               | function_call SEMItype_declaration_block : TYPE type_definition_listtype_definition_list : type_definition_list single_type_definition\n                           | single_type_definitionsingle_type_definition : ID EQUAL_TO type_definition SEMItype_definition : array_type_definition\n                       | record_type_definitionarray_type_definition : ARRAY LBRACKET NUMERO RBRACKET OF tipo_specifierrecord_type_definition : RECORD field_list ENDfield_list : field_list field_declaration\n                  | emptyfield_declaration : ID COLON tipo_specifier SEMIvar_declaration_block : VAR var_declaration_listvar_declaration_list : var_declaration_list declaracao_var\n                           | declaracao_vardeclaracao_var : ID COLON tipo_specifier SEMItipo_specifier : INTEGER\n                      | REAL\n                      | STRING\n                      | IDatribuicao : lvalue ATRIB expressao SEMIlvalue : ID\n              | array_access\n              | record_accessarray_access : ID LBRACKET expressao RBRACKETrecord_access : lvalue DOT IDfunction_declaration : DEF ID LPAREN params_opt RPAREN tipo_retorno_opt function_bodyvar_declarations_opt : var_declaration_block\n                            | emptyfunction_body : var_declarations_opt BEGIN lista_comandos END SEMIreturn_statement : RETURN expressao SEMIparams_opt : params\n                  | emptyparams : params COMMA param\n              | paramparam : ID COLON tipo_specifiertipo_retorno_opt : COLON COLON tipo_specifier\n                       | emptyexpressao : expressao PLUS expressao\n                 | expressao MINUS expressao\n                 | expressao TIMES expressao\n                 | expressao DIVIDE expressaoexpressao : termotermo : LPAREN expressao RPAREN\n             | NUMERO\n             | function_call\n             | lvaluefunction_call : ID LPAREN args_opt RPARENargs_opt : args\n                | emptyargs : args COMMA expressao\n            | expressaoempty :'
    
_lr_action_items = {'BEGIN':([0,2,3,5,7,8,9,15,16,18,19,32,34,54,56,57,58,77,81,83,99,101,106,107,108,109,114,119,],[-64,6,-3,-2,-4,-5,-6,-13,-15,-24,-26,-14,-25,-31,-28,-29,-30,-16,-27,-64,-64,-49,-38,113,-39,-40,-48,-41,]),'TYPE':([0,2,3,5,7,8,9,15,16,18,19,32,34,77,81,106,119,],[-64,10,-3,-2,-4,-5,-6,-13,-15,-24,-26,-14,-25,-16,-27,-38,-41,]),'VAR':([0,2,3,5,7,8,9,15,16,18,19,32,34,54,56,57,58,77,81,83,99,101,106,114,119,],[-64,11,-3,-2,-4,-5,-6,-13,-15,-24,-26,-14,-25,-31,-28,-29,-30,-16,-27,-64,11,-49,-38,-48,-41,]),'DEF':([0,2,3,5,7,8,9,15,16,18,19,32,34,77,81,106,119,],[-64,12,-3,-2,-4,-5,-6,-13,-15,-24,-26,-14,-25,-16,-27,-38,-41,]),'$end':([1,4,37,],[0,-1,-7,]),'END':([6,13,14,23,24,25,38,53,66,79,80,85,96,113,116,117,],[-64,22,-9,-8,-10,-11,-12,-64,-42,95,-22,-32,-21,-64,-23,118,]),'RETURN':([6,13,14,23,24,25,38,66,85,113,117,],[-64,28,-9,-8,-10,-11,-12,-42,-32,-64,28,]),'ID':([6,10,11,12,13,14,15,16,18,19,23,24,25,28,32,34,35,36,38,39,40,43,47,48,53,66,67,68,69,70,77,79,80,81,82,84,85,92,96,105,110,111,113,116,117,],[-64,17,20,21,29,-9,17,-15,20,-26,-8,-10,-11,29,-14,-25,54,59,-12,29,65,29,29,29,-64,-42,29,29,29,29,-16,97,-22,-27,54,59,-32,29,-21,54,54,54,-64,-23,29,]),'EQUAL_TO':([17,],[33,]),'COLON':([20,59,83,97,100,],[35,82,100,105,110,]),'LPAREN':([21,28,29,39,43,47,48,67,68,69,70,92,],[36,43,47,43,43,43,43,43,43,43,43,43,]),'SEMI':([22,26,29,30,31,41,42,44,45,46,49,50,51,54,55,56,57,58,64,65,86,87,88,89,90,91,93,95,112,115,118,],[37,38,-33,-34,-35,66,-54,-56,-57,-58,77,-17,-18,-31,81,-28,-29,-30,85,-37,-50,-51,-52,-53,-55,-59,-36,-20,116,-19,119,]),'ATRIB':([27,29,30,31,65,93,],[39,-33,-34,-35,-37,-36,]),'DOT':([27,29,30,31,46,65,93,],[40,-33,-34,-35,40,-37,-36,]),'NUMERO':([28,39,43,47,48,67,68,69,70,78,92,],[44,44,44,44,44,44,44,44,44,94,44,]),'PLUS':([29,30,31,41,42,44,45,46,64,65,71,75,76,86,87,88,89,90,91,93,103,],[-33,-34,-35,67,-54,-56,-57,-58,67,-37,67,67,67,-50,-51,-52,-53,-55,-59,-36,67,]),'MINUS':([29,30,31,41,42,44,45,46,64,65,71,75,76,86,87,88,89,90,91,93,103,],[-33,-34,-35,68,-54,-56,-57,-58,68,-37,68,68,68,-50,-51,-52,-53,-55,-59,-36,68,]),'TIMES':([29,30,31,41,42,44,45,46,64,65,71,75,76,86,87,88,89,90,91,93,103,],[-33,-34,-35,69,-54,-56,-57,-58,69,-37,69,69,69,69,69,-52,-53,-55,-59,-36,69,]),'DIVIDE':([29,30,31,41,42,44,45,46,64,65,71,75,76,86,87,88,89,90,91,93,103,],[-33,-34,-35,70,-54,-56,-57,-58,70,-37,70,70,70,70,70,-52,-53,-55,-59,-36,70,]),'RPAREN':([29,30,31,36,42,44,45,46,47,54,56,57,58,60,61,62,63,65,71,72,73,74,75,86,87,88,89,90,91,93,98,102,103,],[-33,-34,-35,-64,-54,-56,-57,-58,-64,-31,-28,-29,-30,83,-43,-44,-46,-37,90,91,-60,-61,-63,-50,-51,-52,-53,-55,-59,-36,-47,-45,-62,]),'COMMA':([29,30,31,42,44,45,46,54,56,57,58,61,63,65,73,75,86,87,88,89,90,91,93,98,102,103,],[-33,-34,-35,-54,-56,-57,-58,-31,-28,-29,-30,84,-46,-37,92,-63,-50,-51,-52,-53,-55,-59,-36,-47,-45,-62,]),'RBRACKET':([29,30,31,42,44,45,46,65,76,86,87,88,89,90,91,93,94,],[-33,-34,-35,-54,-56,-57,-58,-37,93,-50,-51,-52,-53,-55,-59,-36,104,]),'LBRACKET':([29,52,],[48,78,]),'ARRAY':([33,],[52,]),'RECORD':([33,],[53,]),'INTEGER':([35,82,105,110,111,],[56,56,56,56,56,]),'REAL':([35,82,105,110,111,],[57,57,57,57,57,]),'STRING':([35,82,105,110,111,],[58,58,58,58,58,]),'OF':([104,],[111,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'lista_declaracoes':([0,],[2,]),'empty':([0,6,36,47,53,83,99,113,],[3,14,62,74,80,101,109,14,]),'corpo_principal':([2,],[4,]),'declaracao':([2,],[5,]),'type_declaration_block':([2,],[7,]),'var_declaration_block':([2,99,],[8,108,]),'function_declaration':([2,],[9,]),'lista_comandos':([6,113,],[13,117,]),'type_definition_list':([10,],[15,]),'single_type_definition':([10,15,],[16,32,]),'var_declaration_list':([11,],[18,]),'declaracao_var':([11,18,],[19,34,]),'comando':([13,117,],[23,23,]),'atribuicao':([13,117,],[24,24,]),'return_statement':([13,117,],[25,25,]),'function_call':([13,28,39,43,47,48,67,68,69,70,92,117,],[26,45,45,45,45,45,45,45,45,45,45,26,]),'lvalue':([13,28,39,43,47,48,67,68,69,70,92,117,],[27,46,46,46,46,46,46,46,46,46,46,27,]),'array_access':([13,28,39,43,47,48,67,68,69,70,92,117,],[30,30,30,30,30,30,30,30,30,30,30,30,]),'record_access':([13,28,39,43,47,48,67,68,69,70,92,117,],[31,31,31,31,31,31,31,31,31,31,31,31,]),'expressao':([28,39,43,47,48,67,68,69,70,92,],[41,64,71,75,76,86,87,88,89,103,]),'termo':([28,39,43,47,48,67,68,69,70,92,],[42,42,42,42,42,42,42,42,42,42,]),'type_definition':([33,],[49,]),'array_type_definition':([33,],[50,]),'record_type_definition':([33,],[51,]),'tipo_specifier':([35,82,105,110,111,],[55,98,112,114,115,]),'params_opt':([36,],[60,]),'params':([36,],[61,]),'param':([36,84,],[63,102,]),'args_opt':([47,],[72,]),'args':([47,],[73,]),'field_list':([53,],[79,]),'field_declaration':([79,],[96,]),'tipo_retorno_opt':([83,],[99,]),'function_body':([99,],[106,]),'var_declarations_opt':([99,],[107,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> lista_declaracoes corpo_principal','programa',2,'p_programa','parser.py',101),
  ('lista_declaracoes -> lista_declaracoes declaracao','lista_declaracoes',2,'p_lista_declaracoes','parser.py',105),
  ('lista_declaracoes -> empty','lista_declaracoes',1,'p_lista_declaracoes','parser.py',106),
  ('declaracao -> type_declaration_block','declaracao',1,'p_declaracao','parser.py',114),
  ('declaracao -> var_declaration_block','declaracao',1,'p_declaracao','parser.py',115),
  ('declaracao -> function_declaration','declaracao',1,'p_declaracao','parser.py',116),
  ('corpo_principal -> BEGIN lista_comandos END SEMI','corpo_principal',4,'p_corpo_principal','parser.py',120),
  ('lista_comandos -> lista_comandos comando','lista_comandos',2,'p_lista_comandos','parser.py',124),
  ('lista_comandos -> empty','lista_comandos',1,'p_lista_comandos','parser.py',125),
  ('comando -> atribuicao','comando',1,'p_comando','parser.py',133),
  ('comando -> return_statement','comando',1,'p_comando','parser.py',134),
  ('comando -> function_call SEMI','comando',2,'p_comando','parser.py',135),
  ('type_declaration_block -> TYPE type_definition_list','type_declaration_block',2,'p_type_declaration_block','parser.py',140),
  ('type_definition_list -> type_definition_list single_type_definition','type_definition_list',2,'p_type_definition_list','parser.py',144),
  ('type_definition_list -> single_type_definition','type_definition_list',1,'p_type_definition_list','parser.py',145),
  ('single_type_definition -> ID EQUAL_TO type_definition SEMI','single_type_definition',4,'p_single_type_definition','parser.py',150),
  ('type_definition -> array_type_definition','type_definition',1,'p_type_definition','parser.py',154),
  ('type_definition -> record_type_definition','type_definition',1,'p_type_definition','parser.py',155),
  ('array_type_definition -> ARRAY LBRACKET NUMERO RBRACKET OF tipo_specifier','array_type_definition',6,'p_array_type_definition','parser.py',159),
  ('record_type_definition -> RECORD field_list END','record_type_definition',3,'p_record_type_definition','parser.py',163),
  ('field_list -> field_list field_declaration','field_list',2,'p_field_list','parser.py',167),
  ('field_list -> empty','field_list',1,'p_field_list','parser.py',168),
  ('field_declaration -> ID COLON tipo_specifier SEMI','field_declaration',4,'p_field_declaration','parser.py',173),
  ('var_declaration_block -> VAR var_declaration_list','var_declaration_block',2,'p_var_declaration_block','parser.py',177),
  ('var_declaration_list -> var_declaration_list declaracao_var','var_declaration_list',2,'p_var_declaration_list','parser.py',181),
  ('var_declaration_list -> declaracao_var','var_declaration_list',1,'p_var_declaration_list','parser.py',182),
  ('declaracao_var -> ID COLON tipo_specifier SEMI','declaracao_var',4,'p_declaracao_var','parser.py',187),
  ('tipo_specifier -> INTEGER','tipo_specifier',1,'p_tipo_specifier','parser.py',191),
  ('tipo_specifier -> REAL','tipo_specifier',1,'p_tipo_specifier','parser.py',192),
  ('tipo_specifier -> STRING','tipo_specifier',1,'p_tipo_specifier','parser.py',193),
  ('tipo_specifier -> ID','tipo_specifier',1,'p_tipo_specifier','parser.py',194),
  ('atribuicao -> lvalue ATRIB expressao SEMI','atribuicao',4,'p_atribuicao','parser.py',199),
  ('lvalue -> ID','lvalue',1,'p_lvalue','parser.py',203),
  ('lvalue -> array_access','lvalue',1,'p_lvalue','parser.py',204),
  ('lvalue -> record_access','lvalue',1,'p_lvalue','parser.py',205),
  ('array_access -> ID LBRACKET expressao RBRACKET','array_access',4,'p_array_access','parser.py',209),
  ('record_access -> lvalue DOT ID','record_access',3,'p_record_access','parser.py',213),
  ('function_declaration -> DEF ID LPAREN params_opt RPAREN tipo_retorno_opt function_body','function_declaration',7,'p_function_declaration','parser.py',218),
  ('var_declarations_opt -> var_declaration_block','var_declarations_opt',1,'p_var_declarations_opt','parser.py',222),
  ('var_declarations_opt -> empty','var_declarations_opt',1,'p_var_declarations_opt','parser.py',223),
  ('function_body -> var_declarations_opt BEGIN lista_comandos END SEMI','function_body',5,'p_function_body','parser.py',227),
  ('return_statement -> RETURN expressao SEMI','return_statement',3,'p_return_statement','parser.py',231),
  ('params_opt -> params','params_opt',1,'p_params_opt','parser.py',235),
  ('params_opt -> empty','params_opt',1,'p_params_opt','parser.py',236),
  ('params -> params COMMA param','params',3,'p_params','parser.py',240),
  ('params -> param','params',1,'p_params','parser.py',241),
  ('param -> ID COLON tipo_specifier','param',3,'p_param','parser.py',246),
  ('tipo_retorno_opt -> COLON COLON tipo_specifier','tipo_retorno_opt',3,'p_tipo_retorno_opt','parser.py',250),
  ('tipo_retorno_opt -> empty','tipo_retorno_opt',1,'p_tipo_retorno_opt','parser.py',251),
  ('expressao -> expressao PLUS expressao','expressao',3,'p_expressao','parser.py',257),
  ('expressao -> expressao MINUS expressao','expressao',3,'p_expressao','parser.py',258),
  ('expressao -> expressao TIMES expressao','expressao',3,'p_expressao','parser.py',259),
  ('expressao -> expressao DIVIDE expressao','expressao',3,'p_expressao','parser.py',260),
  ('expressao -> termo','expressao',1,'p_expressao_termo','parser.py',264),
  ('termo -> LPAREN expressao RPAREN','termo',3,'p_termo','parser.py',268),
  ('termo -> NUMERO','termo',1,'p_termo','parser.py',269),
  ('termo -> function_call','termo',1,'p_termo','parser.py',270),
  ('termo -> lvalue','termo',1,'p_termo','parser.py',271),
  ('function_call -> ID LPAREN args_opt RPAREN','function_call',4,'p_function_call','parser.py',280),
  ('args_opt -> args','args_opt',1,'p_args_opt','parser.py',284),
  ('args_opt -> empty','args_opt',1,'p_args_opt','parser.py',285),
  ('args -> args COMMA expressao','args',3,'p_args','parser.py',289),
  ('args -> expressao','args',1,'p_args','parser.py',290),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',295),
]
